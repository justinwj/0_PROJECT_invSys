'----- In clsDiagramConnection.cls -----
' Class Module: clsDiagramConnection
' Represents a connection between two diagram items
Option Explicit

Private pFromID           As String
Private pToID             As String
Private pLabelText        As String
Private pConnectorMasterU As String

' FromID
Public Property Get FromID() As String
    FromID = pFromID
End Property
Public Property Let FromID(ByVal Value As String)
    pFromID = Value
End Property

' ToID
Public Property Get ToID() As String
    ToID = pToID
End Property
Public Property Let ToID(ByVal Value As String)
    pToID = Value
End Property

' LabelText
Public Property Get LabelText() As String
    LabelText = pLabelText
End Property
Public Property Let LabelText(ByVal Value As String)
    pLabelText = Value
End Property

' ConnectorMasterU
Public Property Get ConnectorMasterU() As String
    ConnectorMasterU = pConnectorMasterU
End Property
Public Property Let ConnectorMasterU(ByVal Value As String)
    pConnectorMasterU = Value
End Property


'----- In modDiagramCore.bas (standard module) -----

' RunDiagramGeneration: full pipeline using config-driven parameters
Public Sub RunDiagramGeneration()
    Dim cfg As clsDiagramConfig
    Dim items As Collection
    Dim result As Variant

    ' 1) Load user-defined settings
    Set cfg = GetConfig()
    Debug.Print "[Diagram] Type=" & cfg.DiagramType & _
                "; ModuleFilter=" & cfg.ModuleFilter & _
                "; ProcFilter=" & cfg.ProcFilter

    ' 2) Parse and map VBA code to Visio stencil directives
    '    Use Application.Run to safely call external mapping module
    On Error Resume Next
    result = Application.Run("modDiagramMaps.ParseAndMap", _
                             ThisWorkbook, cfg.ModuleFilter, cfg.ProcFilter)
    On Error GoTo 0
    If TypeName(result) = "Collection" Then
        Set items = result
    Else
        Set items = New Collection  ' fallback empty set
        Debug.Print "[Diagram] Warning: no mapped items returned."
    End If

    ' 3) Prepare Visio environment and load stencil masters
    PrepareVisioEnvironment
    LoadStencilMasterMetadata

    ' 4) Render mapped items onto the Visio page
    '    DrawMappedElements signature now includes layout and export args
    DrawMappedElements items, cfg.ScaleMode, cfg.ExportFormat

    ' 5) Post-render: apply additional layout (tiling, fitting, etc.)
    ApplyLayout cfg.ScaleMode

    ' 6) Export diagram using configured format
    modDiagramExport.SaveDiagram cfg.ExportFormat

    Debug.Print "[Diagram] Generation complete."
End Sub

' Note: Adjust DrawMappedElements signature to accept config args
' Public Sub DrawMappedElements(ByVal items As Collection, ByVal ScaleMode As String, ByVal ExportFormat As String)
'     ' …render shapes, apply ScaleMode settings, ready for export…
' End Sub

' Smoke test to verify config loading only
Public Sub TestLoadConfig()
    Dim cfg As clsDiagramConfig
    Set cfg = GetConfig()
    Debug.Print "Type:    ", cfg.DiagramType
    Debug.Print "ModFil:  ", cfg.ModuleFilter
    Debug.Print "PrFil:   ", cfg.ProcFilter
    Debug.Print "Scale:   ", cfg.ScaleMode
    Debug.Print "ExpFmt:  ", cfg.ExportFormat
End Sub


' Standard Module: modDiagramCore
' Contains the DrawConnections routine only
Option Explicit

' DrawConnections: connects shapes in Visio based on item IDs
Public Sub DrawConnections(items As Collection, conns As Collection)
    Dim visApp    As Object
    Dim visPage   As Object
    Dim dictShapes As Object
    Dim item      As clsDiagramItem
    Dim conn      As clsDiagramConnection
    Dim shpFrom   As Object
    Dim shpTo     As Object

    ' Attach to Visio
    On Error Resume Next
    Set visApp = GetObject(, "Visio.Application")
    If visApp Is Nothing Then Set visApp = CreateObject("Visio.Application")
    On Error GoTo 0
    If visApp Is Nothing Then Exit Sub
    Set visPage = visApp.ActivePage

    ' Build lookup of shapes by NameU
    Set dictShapes = CreateObject("Scripting.Dictionary")
    For Each item In items
        On Error Resume Next
        Set shpFrom = visPage.Shapes(item.LabelText)
        On Error GoTo 0
        If Not shpFrom Is Nothing Then dictShapes.Add item.LabelText, shpFrom
    Next

    ' Auto-connect each connection
    For Each conn In conns
        If dictShapes.Exists(conn.FromID) And dictShapes.Exists(conn.ToID) Then
            dictShapes(conn.FromID).AutoConnect dictShapes(conn.ToID), 1
        Else
            Debug.Print "DrawConnections: missing shapes for " & conn.FromID & "→" & conn.ToID
        End If
    Next
End Sub





'----- In modTests.bas (standard module) -----

Public Sub TestDrawConnections()
    Dim items As New Collection
    Dim conns As New Collection
    Dim it   As clsDiagramItem
    Dim conn  As clsDiagramConnection
    Dim visApp As Object, visPage As Object, shp As Object

    ' Initialize Visio
    On Error Resume Next
    Set visApp = GetObject(, "Visio.Application")
    If visApp Is Nothing Then Set visApp = CreateObject("Visio.Application")
    On Error GoTo 0
    If visApp Is Nothing Then
        MsgBox "Visio not available", vbCritical
        Exit Sub
    End If
    Set visPage = visApp.ActivePage

    ' Prepare items
    Set it = New clsDiagramItem: it.LabelText = "A": it.PosX = 1: it.PosY = 5
    items.Add it
    Set it = New clsDiagramItem: it.LabelText = "B": it.PosX = 3: it.PosY = 5
    items.Add it

    ' Drop shapes for each item
    For Each it In items
        Set shp = visPage.Drop(visPage.Document.Masters("Rectangle"), it.PosX, it.PosY)
        shp.Text = it.LabelText
        shp.NameU = it.LabelText
    Next it

    Debug.Print "TestDrawConnections: dropped " & items.Count & " shapes"

    ' Prepare connection
    Set conn = New clsDiagramConnection
    conn.FromID = "A"
    conn.ToID = "B"
    conns.Add conn

    ' Draw connection
    DrawConnections items, conns

    MsgBox "TestDrawConnections completed"
End Sub


