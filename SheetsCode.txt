''''''''''''''''''''''''''''''''''''
' Component: ThisWorkbook
''''''''''''''''''''''''''''''''''''

Private Sub Workbook_Open()
    ' Make sure Excel events are enabled
    Application.EnableEvents = True
    ' Set up all handlers
    modTS_Data.SetupAllHandlers
    ' Add the big search buttons (these work well)
    modTS_Data.AddBigSearchButton
End Sub
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    ' Re-enable events when activating sheets
    Application.EnableEvents = True
    ' Force login form to lock access
    ' frmLogin.Show
End Sub
Sub CheckForHiddenPasswords()
    Dim nm As Name
    For Each nm In ThisWorkbook.Names
        Debug.Print nm.Name & " = " & nm.RefersTo
    Next nm
End Sub





''''''''''''''''''''''''''''''''''''
' Component: InventoryManagement
''''''''''''''''''''''''''''''''''''

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tbl As ListObject
    Dim emptyRows As Range
    Dim PREFIX As String
    Dim idNumber As Long
    Dim existingCodes As Object
    Dim cell As Range
    Dim maxRowNum As Long
    On Error GoTo ErrorHandler
    ' Debug info
    Debug.Print "Worksheet_Change triggered at " & Now()
    Debug.Print "Target address: " & Target.Address
    ' Only process if we're dealing with the table
    Set tbl = Me.ListObjects("invSys")
    If tbl Is Nothing Then
        Debug.Print "Table 'invSys' not found"
        Exit Sub
    End If
    ' Check if change is in the table
    If Not Intersect(Target, tbl.Range) Is Nothing Then
        Debug.Print "Change detected in table"
        Application.EnableEvents = False
        ' ----- Generate Unique Item_Code for New Rows -----
        Set existingCodes = CreateObject("Scripting.Dictionary")
        For Each cell In tbl.ListColumns("Item_Code").DataBodyRange
            If Not IsEmpty(cell.value) Then existingCodes(cell.value) = True
        Next cell
        For Each cell In tbl.ListColumns("Item_Code").DataBodyRange
            If IsEmpty(cell.value) Then
                Debug.Print "Empty Item_Code found at row " & cell.row
                PREFIX = "ITEM-"
                idNumber = 1
                Do While existingCodes.Exists(PREFIX & Format(idNumber, "0000"))
                    idNumber = idNumber + 1
                Loop
                cell.value = PREFIX & Format(idNumber, "0000")
                existingCodes.Add cell.value, True
                Debug.Print "Assigned " & cell.value & " to row " & cell.row
            End If
        Next cell
        ' ----- Generate Sequential ROW Numbers for New Rows -----
        ' Find the maximum existing row number
        maxRowNum = 0
        For Each cell In tbl.ListColumns("ROW").DataBodyRange
            If Not IsEmpty(cell.value) Then
                If IsNumeric(cell.value) Then
                    If CLng(cell.value) > maxRowNum Then maxRowNum = CLng(cell.value)
                End If
            End If
        Next cell
        Debug.Print "Maximum ROW number found: " & maxRowNum
        ' Assign next row number to empty cells in ROW column
        For Each cell In tbl.ListColumns("ROW").DataBodyRange
            If IsEmpty(cell.value) Then
                maxRowNum = maxRowNum + 1
                cell.value = maxRowNum
                Debug.Print "Assigned ROW number " & maxRowNum & " to row " & cell.row
            End If
        Next cell
    Else
        Debug.Print "Change not in table"
    End If
ExitHandler:
    Application.EnableEvents = True
    Exit Sub
ErrorHandler:
    Debug.Print "Error: " & Err.Description & " (Error " & Err.Number & ")"
    Resume ExitHandler
End Sub
' Add a TableChange event handler to better catch row additions
Private Sub Worksheet_TableUpdate(ByVal Target As TableObject)
    If Target.Name = "invSys" Then
        Debug.Print "Table updated at " & Now()
        ' Process the table changes by simulating a worksheet change
        Worksheet_Change Target.Range
    End If
End Sub





''''''''''''''''''''''''''''''''''''
' Component: Recipes
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: UserCredentials
''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''
' here is some new text for the sheet UserCredentials
' This class is used to manage user credentials in the system.
''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''
' here is some new text for the sheet UserCredentials
' This class is used to manage user credentials in the system.
''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''
' here is some new text for the sheet UserCredentials
' This class is used to manage user credentials in the system.
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' Component: InventoryLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: TestSummary
''''''''''''''''''''''''''''''''''''

Sub RunTest_Click()
End Sub





''''''''''''''''''''''''''''''''''''
' Component: Emails
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: Notes
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: ErrorLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: ReceivedTally
''''''''''''''''''''''''''''''''''''

'=================
'ReceivedTally.cls
'=================
' Simple event handler for both worksheet class modules
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Only for single cell selection
    If Target.Cells.count > 1 Then Exit Sub
    ' Check if cell is in ITEMS column
    If modTS_Data.IsInItemsColumn(Target) Then
        ' Set the global selected cell
        Set gSelectedCell = Target
        ' Show the form if not already loaded
        If Not modGlobals.IsFormLoaded("frmItemSearch") Then
            frmItemSearch.Show vbModeless
        End If
    End If
End Sub





''''''''''''''''''''''''''''''''''''
' Component: ShipmentsTally
''''''''''''''''''''''''''''''''''''

'===================
' ShipmentsTally.cls
' ==================
Option Explicit
' Simple event handler for both worksheet class modules
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Only for single cell selection
    If Target.Cells.count > 1 Then Exit Sub
    ' Check if cell is in ITEMS column
    If modTS_Data.IsInItemsColumn(Target) Then
        ' Set the global selected cell
        Set gSelectedCell = Target
        ' Show the form if not already loaded
        If Not modGlobals.IsFormLoaded("frmItemSearch") Then
            frmItemSearch.Show vbModeless
        End If
    End If
End Sub





''''''''''''''''''''''''''''''''''''
' Component: ReceivedLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: ShipmentsLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: ProductionLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: Codes
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: Substitutions
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: Production
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: Prediction
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: PredictionLog
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: CreateRecipe
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: SavedLists
''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''
' Component: IngredientsPalette
''''''''''''''''''''''''''''''''''''





