Attribute VB_Name = "modTS_Shipments"

Option Explicit

'==============================================
' Module: modTS_Shipments (TS for Tally System - Shipments)
' Purpose: Populate shipments form, log shipment batches and update inventory SHIPMENTS column
'==============================================

' Populate the Shipments tally form listbox from the ShipmentsTally table
Public Sub PopulateShipmentsForm(frm As frmShipmentsTally)
    On Error GoTo ErrorHandler

    Dim ws        As Worksheet
    Set ws = ThisWorkbook.Sheets("ShipmentsTally")

    Dim tblShip   As ListObject
    Set tblShip = ws.ListObjects("ShipmentsTally")

    Dim tblDet    As ListObject
    Set tblDet = ws.ListObjects("invSysData_Shipping")

    Dim agg       As Object
    Set agg = CreateObject("Scripting.Dictionary")
    agg.CompareMode = vbTextCompare

    ' Cache column indexes for speed
    Dim colQty       As Long: colQty       = tblShip.ListColumns("QUANTITY").Index
    Dim colTallyRow  As Long: colTallyRow  = tblDet. ListColumns("TALLY_ROW").Index
    Dim colInvRow    As Long: colInvRow    = tblDet. ListColumns("ROW").Index
    Dim colUOM       As Long: colUOM       = tblDet. ListColumns("UOM").Index

    Dim detRow      As ListRow
    For Each detRow In tblDet.ListRows
        Dim tallyIdx  As Long
        tallyIdx = CLng(detRow.Range.Cells(1, colTallyRow).Value)
        ' get quantity from ShipmentsTally by relative row
        Dim qtyVal    As Double
        qtyVal = CDbl(tblShip.DataBodyRange(tallyIdx, colQty).Value)

        ' get the invSys destination row
        Dim invRowKey As String
        invRowKey = CStr(detRow.Range.Cells(1, colInvRow).Value)

        ' pull UOM for display
        Dim uomText   As String
        uomText = CStr(detRow.Range.Cells(1, colUOM).Value)

        ' and the item name for display
        Dim itemName  As String
        itemName = CStr(tblShip.DataBodyRange(tallyIdx, _
                     tblShip.ListColumns("ITEMS").Index).Value)

        If qtyVal > 0 Then
            If Not agg.Exists(invRowKey) Then
                ' store: Array(itemName, totalQty, uom, invRowKey)
                agg.Add invRowKey, Array(itemName, qtyVal, uomText, invRowKey)
            Else
                ' add onto the existing total
                agg(invRowKey)(1) = agg(invRowKey)(1) + qtyVal
            End If
        End If
    Next detRow

    ' now rebuild the ListBox with one line per invSys row
    With frm.lstBox
        .Clear
        .ColumnCount  = 5
        .ColumnWidths = "150;60;60;0;0"  ' hide ITEM_CODE & ROW
        .AddItem      "ITEMS"
        .List(0, 1)   = "QUANTITY"
        .List(0, 2)   = "UOM"

        Dim key As Variant
        For Each key In agg.Keys
            .AddItem agg(key)(0)                   ' item name
            .List(.ListCount - 1, 1) = agg(key)(1) ' summed quantity
            .List(.ListCount - 1, 2) = agg(key)(2) ' UOM
            .List(.ListCount - 1, 4) = agg(key)(3) ' ROW (hidden)
        Next key
    End With

    Exit Sub

ErrorHandler:
    MsgBox "Error in PopulateShipmentsForm: " & Err.Description, vbCritical
End Sub

' Main routine: log shipments, update inventory, then clear staging
Public Sub ProcessShipmentsBatch()
    Dim wsShip As Worksheet: Set wsShip = ThisWorkbook.Sheets("ShipmentsTally")
    Dim tblShip As ListObject: Set tblShip = wsShip.ListObjects("ShipmentsTally")
    Dim tblDet As ListObject: Set tblDet = wsShip.ListObjects("invSysData_Shipping")
    Dim wsInv As Worksheet: Set wsInv = ThisWorkbook.Sheets("INVENTORY MANAGEMENT")
    Dim tblInv As ListObject: Set tblInv = wsInv.ListObjects("invSys")
    Dim wsLog As Worksheet: Set wsLog = ThisWorkbook.Sheets("ShipmentsLog")
    Dim tblLog As ListObject: Set tblLog = wsLog.ListObjects("ShipmentsLog")
    Dim i As Long

    For i = 1 To tblShip.ListRows.Count
        Dim refNum As String
        Dim itm As String
        Dim qtyNum As Double
        Dim uom As String, vendor As String, location As String
        Dim code As String, rowNum As Long
        Dim entryDate As Date
        Dim newRow As ListRow

        ' Read batch fields
        With tblShip.DataBodyRange
            refNum = CStr(.Cells(i, tblShip.ListColumns("ORDER_NUMBER").Index).Value)
            itm = CStr(.Cells(i, tblShip.ListColumns("ITEMS").Index).Value)
            qtyNum = CDbl(.Cells(i, tblShip.ListColumns("QUANTITY").Index).Value)
        End With
        With tblDet.DataBodyRange
            uom = CStr(.Cells(i, tblDet.ListColumns("UOM").Index).Value)
            vendor = CStr(.Cells(i, tblDet.ListColumns("VENDOR").Index).Value)
            location = CStr(.Cells(i, tblDet.ListColumns("LOCATION").Index).Value)
            code = CStr(.Cells(i, tblDet.ListColumns("ITEM_CODE").Index).Value)
            rowNum = CLng(.Cells(i, tblDet.ListColumns("ROW").Index).Value)
            entryDate = CDate(.Cells(i, tblDet.ListColumns("ENTRY_DATE").Index).Value)
        End With

        ' Append to ShipmentsLog
        Set newRow = tblLog.ListRows.Add
        With tblLog.ListColumns
            newRow.Range(1, .Item("ORDER_NUMBER").Index).Value = refNum
            newRow.Range(1, .Item("ITEMS").Index).Value = itm
            newRow.Range(1, .Item("QUANTITY").Index).Value = qtyNum
            newRow.Range(1, .Item("UOM").Index).Value = uom
            newRow.Range(1, .Item("VENDOR").Index).Value = vendor
            newRow.Range(1, .Item("LOCATION").Index).Value = location
            newRow.Range(1, .Item("ITEM_CODE").Index).Value = code
            newRow.Range(1, .Item("ROW").Index).Value = rowNum
            newRow.Range(1, .Item("ENTRY_DATE").Index).Value = entryDate
        End With

        ' Update inventory SHIPMENTS
        With tblInv.ListRows(rowNum).Range
            .Cells(tblInv.ListColumns("SHIPMENTS").Index).Value = _
                Val(.Cells(tblInv.ListColumns("SHIPMENTS").Index).Value) + qtyNum
        End With
    Next i

    ' Clear staging
    If Not tblShip.DataBodyRange Is Nothing Then tblShip.DataBodyRange.Delete
    If Not tblDet.DataBodyRange Is Nothing Then tblDet.DataBodyRange.Delete
End Sub