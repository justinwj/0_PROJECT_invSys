''''''''''''''''''''''''''''''''''''
' UserForm: frmAdminControls
''''''''''''''''''''''''''''''''''''
Private Sub btnCreateDeleteUser_Click()
    frmCreateDeleteUser.Show
End Sub
Private Sub btnEditUser_Click()
    frmEditUser.Show
End Sub


''''''''''''''''''''''''''''''''''''
' UserForm: frmAdminEmail
''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''
' UserForm: frmCreateDeleteUser
''''''''''''''''''''''''''''''''''''
Private Sub UserForm_Initialize()
    ' Load roles into the dropdown
    modUserAuth.LoadRolesIntoComboBox Me.cmbRole
End Sub
Private Sub btnCreateUser_Click()
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim newRow As ListRow
    Dim username As String
    Dim pin As String
    Dim role As String
    Dim userID As String
    Dim foundUser As Range
    ' Set reference to UserCredentials table
    Set ws = ThisWorkbook.Sheets("UserCredentials")
    Set tbl = ws.ListObjects("UserCredentials")
    ' Get user input
    username = Trim(Me.txtUsername.value)
    pin = Trim(Me.txtPIN.value)
    role = Me.cmbRole.value
    ' Validate inputs
    If username = "" Or pin = "" Or role = "" Then
        Me.lblMessage.Caption = "All fields are required."
        Exit Sub
    End If
    If Not IsNumeric(pin) Or Len(pin) <> 6 Then
        Me.lblMessage.Caption = "PIN must be exactly 6 digits."
        Exit Sub
    End If
    ' Get column indexes dynamically
    Dim colUserID As Integer, colUsername As Integer, colPIN As Integer
    Dim colRole As Integer, colStatus As Integer, colLastLogin As Integer
    colUserID = tbl.ListColumns("USER_ID").Index
    colUsername = tbl.ListColumns("USERNAME").Index
    colPIN = tbl.ListColumns("PIN").Index
    colRole = tbl.ListColumns("ROLE").Index
    colStatus = tbl.ListColumns("STATUS").Index
    colLastLogin = tbl.ListColumns("LAST LOGIN").Index
    ' Check if username already exists
    Set foundUser = tbl.ListColumns("USERNAME").DataBodyRange.Find(What:=username, LookAt:=xlWhole)
    If Not foundUser Is Nothing Then
        Me.lblMessage.Caption = "User already exists."
        Exit Sub
    End If
    ' Generate unique USER_ID (e.g., "USR" & timestamp)
    userID = "USR" & Format(Now, "YYMMDDHHMMSS")
    ' Add new user to UserCredentials table
    Set newRow = tbl.ListRows.Add
    newRow.Range(1, colUserID).value = userID  ' USER_ID
    newRow.Range(1, colUsername).value = username  ' USERNAME
    newRow.Range(1, colPIN).value = pin  ' PIN
    newRow.Range(1, colRole).value = role  ' ROLE
    newRow.Range(1, colStatus).value = "Active"  ' STATUS
    newRow.Range(1, colLastLogin).value = ""  ' LAST LOGIN (empty)
    ' Confirmation message
    Me.lblMessage.Caption = "User created successfully!"
End Sub
Private Sub btnRandomPIN_Click()
    Dim randomPIN As String
    ' Generate a random 6-digit number
    randomPIN = Format(Int((900000 * Rnd) + 100000), "000000")
    ' Display the generated PIN in txtPIN
    Me.txtPIN.value = randomPIN
End Sub
Private Sub btnDeleteUser_Click()
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim foundUser As Range
    Dim username As String
    Dim colUsername As Integer
    ' Set reference to UserCredentials table
    Set ws = ThisWorkbook.Sheets("UserCredentials")
    Set tbl = ws.ListObjects("UserCredentials")
    ' Get the username from input field
    username = Trim(Me.txtUsername.value)
    ' Validate input
    If username = "" Then
        Me.lblMessage.Caption = "Enter a username to delete."
        Exit Sub
    End If
    ' Get column index for "USERNAME"
    colUsername = tbl.ListColumns("USERNAME").Index
    ' Search for the username in UserCredentials table
    Set foundUser = tbl.ListColumns("USERNAME").DataBodyRange.Find(What:=username, LookAt:=xlWhole)
    ' If user is found, delete the row
    If Not foundUser Is Nothing Then
        tbl.ListRows(foundUser.row - tbl.DataBodyRange.row + 1).Delete
        Me.lblMessage.Caption = "User deleted successfully."
    Else
        Me.lblMessage.Caption = "User not found."
    End If
End Sub



''''''''''''''''''''''''''''''''''''
' UserForm: frmEditUser
''''''''''''''''''''''''''''''''''''
Private Sub UserForm_Initialize()
    ' Load usernames into cmbUserName
    modUserAuth.LoadUsersIntoComboBox Me.cmbUserName
    ' Load roles into cmbRoleChange
    modUserAuth.LoadRolesIntoComboBox Me.cmbRoleChange
End Sub
Private Sub btnUpdateUser_Click()
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim foundUser As Range
    Dim selectedUsername As String
    Dim newUsername As String
    Dim newPIN As String
    Dim newRole As String
    Dim colUsername As Integer, colPIN As Integer, colRole As Integer
    ' Set reference to UserCredentials table
    Set ws = ThisWorkbook.Sheets("UserCredentials")
    Set tbl = ws.ListObjects("UserCredentials")
    ' Get user input
    selectedUsername = Trim(Me.cmbUserName.value)
    newUsername = Trim(Me.txtNewUserName.value)
    newPIN = Trim(Me.txtNewPIN.value)
    newRole = Trim(Me.cmbRoleChange.value)
    ' Validate selection
    If selectedUsername = "" Then
        Me.lblMessages.Caption = "Select a user to update."
        Exit Sub
    End If
    ' Get column indexes dynamically
    colUsername = tbl.ListColumns("USERNAME").Index
    colPIN = tbl.ListColumns("PIN").Index
    colRole = tbl.ListColumns("ROLE").Index
    ' Find user in UserCredentials table
    Set foundUser = tbl.ListColumns("USERNAME").DataBodyRange.Find(What:=selectedUsername, LookAt:=xlWhole)
    ' If user is not found, exit
    If foundUser Is Nothing Then
        Me.lblMessages.Caption = "User not found."
        Exit Sub
    End If
    ' Update username if a new one is provided and is different from current
    If newUsername <> "" And newUsername <> selectedUsername Then
        Dim checkUsername As Range
        Set checkUsername = tbl.ListColumns("USERNAME").DataBodyRange.Find(What:=newUsername, LookAt:=xlWhole)
        If Not checkUsername Is Nothing Then
            Me.lblMessages.Caption = "Username already in use."
            Exit Sub
        End If
        foundUser.value = newUsername
    End If
    ' Update PIN if a new one is provided
    If newPIN <> "" Then
        If Not IsNumeric(newPIN) Or Len(newPIN) <> 6 Then
            Me.lblMessages.Caption = "PIN must be exactly 6 digits."
            Exit Sub
        End If
        foundUser.offset(0, colPIN - colUsername).value = newPIN
    End If
    ' Update role if a new one is selected
    If newRole <> "" Then
        foundUser.offset(0, colRole - colUsername).value = newRole
    End If
    ' Confirmation message
    Me.lblMessages.Caption = "User updated successfully."
End Sub
Private Sub btnNewPIN_Click()
    Dim randomPIN As String
    ' Generate a random 6-digit number
    randomPIN = Format(Int((900000 * Rnd) + 100000), "000000")
    ' Display the generated PIN in txtPIN
    Me.txtNewPIN.value = randomPIN
End Sub



''''''''''''''''''''''''''''''''''''
' UserForm: frmItemSearch
''''''''''''''''''''''''''''''''''''
Option Explicit
Private FullItemList As Variant
Private LastSearchText As String
Private LastSearchTime As Double
Private SearchFirstCharIndex() As Long  ' Array to store first character indexes
Private Const MIN_SEARCH_INTERVAL As Double = 0.2  ' Minimum seconds between searches
Private Sub UserForm_MouseScroll()
    EnableMouseScroll frmItemSearch
End Sub
Private Sub UserForm_Activate()
    Me.txtBox.SetFocus
    ' Place the caret at the beginning with no selection.
    Me.txtBox.SelStart = 0
    Me.txtBox.SelLength = 0
End Sub
Private Sub UserForm_Initialize()
    ' Set up the list box columns
    Me.lstBox.ColumnCount = 4
    Me.lstBox.ColumnWidths = "40;60;80;150"
    ' Center the form
    Me.StartUpPosition = 1 'CenterOwner
    ' Load items
    Dim items As Variant
    items = modTS_Data.LoadItemList()
    If Not IsEmpty(items) Then
        PopulateListBox items
        FullItemList = items
        BuildFirstCharIndex
    End If
    ' Apply any search text right away
    txtBox_Change
End Sub
' Build an index of where each first character appears in the list for faster searching
Private Sub BuildFirstCharIndex()
    Dim i As Long, char As String
    Dim dict As Object
    ' Create a dictionary to track the first occurrence of each character
    Set dict = CreateObject("Scripting.Dictionary")
    ' Initialize the array with -1 (not found)
    ReDim SearchFirstCharIndex(0 To 255)
    For i = 0 To 255
        SearchFirstCharIndex(i) = -1
    Next i
    ' Go through the list and record the first occurrence of each first character
    For i = 0 To Me.lstBox.ListCount - 1
        ' Use index 3 for ITEM name instead of 2 (which is VENDOR)
        If Me.lstBox.List(i, 3) <> "" Then
            char = UCase(Left$(Me.lstBox.List(i, 3), 1))
            ' Only record the first occurrence
            If Asc(char) <= 255 And SearchFirstCharIndex(Asc(char)) = -1 Then
                SearchFirstCharIndex(Asc(char)) = i
            End If
        End If
    Next i
End Sub
' Update the txtBox_Change event with better error handling for fast typing
Private Sub txtBox_Change()
    Dim currentTime As Double
    Dim searchText As String, firstChar As String
    Dim i As Long, matchIndex As Long, startIndex As Long
    Dim visibleItems As Long, centerPos As Long
    ' Get current time and search text
    currentTime = Timer
    searchText = LCase(Trim(Me.txtBox.text))
    ' Only search if:
    ' 1. Search text has changed significantly, OR
    ' 2. Enough time has passed since last search, OR
    ' 3. Text is empty or very short
    If searchText <> LastSearchText And _
       (currentTime - LastSearchTime >= MIN_SEARCH_INTERVAL Or _
        Len(searchText) <= 2) Then
        ' Update tracking variables
        LastSearchTime = currentTime
        LastSearchText = searchText
        ' If the text box is empty, clear the list box selection and exit
        If Len(searchText) = 0 Then
            Me.lstBox.ListIndex = -1
            Exit Sub
        End If
        ' Get the first character and find its index position
        On Error Resume Next
        firstChar = UCase(Left$(searchText, 1))
        If Len(firstChar) > 0 And Asc(firstChar) <= 255 Then
            startIndex = SearchFirstCharIndex(Asc(firstChar))
        Else
            startIndex = 0
        End If
        On Error GoTo 0
        ' If first character not indexed, start from beginning
        If startIndex = -1 Then startIndex = 0
        ' Optimized search strategy
        matchIndex = -1
        On Error Resume Next
        ' First pass: Search from the first character index position
        For i = startIndex To Me.lstBox.ListCount - 1
            ' Use index 3 for ITEM name instead of 2
            If InStr(1, LCase(Me.lstBox.List(i, 3)), searchText) > 0 Then
                matchIndex = i
                Exit For
            End If
        Next i
        ' Second pass: If not found and we started from a specific index,
        ' search from beginning to that index
        If matchIndex = -1 And startIndex > 0 Then
            For i = 0 To startIndex - 1
                ' Use index 3 for ITEM name instead of 2
                If InStr(1, LCase(Me.lstBox.List(i, 3)), searchText) > 0 Then
                    matchIndex = i
                    Exit For
                End If
            Next i
        End If
        On Error GoTo 0
        ' Update UI with results
        If matchIndex <> -1 Then
            Me.lstBox.ListIndex = matchIndex
            ' FIXED: Better centering calculation with error handling
            On Error Resume Next
            ' Calculate visible items - ensure it's at least 1
            visibleItems = Int(Me.lstBox.Height / 15)  ' Approx height per item
            If visibleItems < 1 Then visibleItems = 1
            ' Safe calculation for center position
            If matchIndex > Int(visibleItems / 2) Then
                centerPos = matchIndex - Int(visibleItems / 2)
            Else
                centerPos = 0
            End If
            ' Set top index safely
            Me.lstBox.TopIndex = centerPos
            On Error GoTo 0
            ' Update description
            UpdateDescription
        Else
            Me.lstBox.ListIndex = -1
            Me.txtBox2.text = ""
        End If
    End If
End Sub
' When the user clicks on an item in the list box
Private Sub lstBox_Click()
    ' Keep the item highlighted but don't update the search text
    UpdateDescription
End Sub
' Add handler for keyboard navigation in list box
Private Sub lstBox_Change()
    UpdateDescription
End Sub
' Commit the selection if the user presses Tab or Enter in textbox
Private Sub txtBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Or KeyCode = vbKeyTab Then
        CommitSelectionAndClose
        KeyCode = 0  ' Prevent default handling
    End If
End Sub
' FIX 2: Ensure Enter key works when list box has focus
Private Sub lstBox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii = vbKeyReturn Then
        CommitSelectionAndClose
        KeyAscii = 0  ' Prevent default handling
    End If
End Sub
' Also handle key down for Enter in list box
Private Sub lstBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Or KeyCode = vbKeyTab Then
        CommitSelectionAndClose
        KeyCode = 0  ' Prevent default handling
    End If
End Sub
' Double-clicking on an item also commits the selection.
Private Sub lstBox_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    CommitSelectionAndClose
End Sub
' data flow between tables
Public Sub CommitSelectionAndClose()
    Static isRunning As Boolean
    ' Prevent recursive calls
    If isRunning Then Exit Sub
    isRunning = True
    Dim chosenValue As String
    Dim chosenItemCode As String
    Dim chosenRowNum As String
    Dim chosenVendor As String
    Dim location As String
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim dataTbl As ListObject
    ' Get selection from list box or text box
    If Me.lstBox.ListIndex <> -1 Then
        chosenRowNum = Me.lstBox.List(Me.lstBox.ListIndex, 0)    ' ROW
        chosenItemCode = Me.lstBox.List(Me.lstBox.ListIndex, 1)  ' ITEM_CODE
        chosenVendor = Me.lstBox.List(Me.lstBox.ListIndex, 2)    ' VENDOR
        chosenValue = Me.lstBox.List(Me.lstBox.ListIndex, 3)     ' Item name
        location = GetLocationByItem(chosenItemCode, chosenValue)
    ElseIf Trim(Me.txtBox.text) <> "" Then
        chosenValue = Me.txtBox.text
        chosenItemCode = ""
        chosenRowNum = ""
        chosenVendor = ""
        location = ""
    Else
        ' No selection made, just exit
        isRunning = False
        Unload Me
        Exit Sub
    End If
    ' Apply the selection to the cell
    If Not gSelectedCell Is Nothing Then
        ' Store the original value before making changes
        Dim originalValue As String
        originalValue = gSelectedCell.value
        ' Update the cell with new item name
        gSelectedCell.value = chosenValue
        ' If we have a valid item selection, update the data table
        If Me.lstBox.ListIndex <> -1 Then
            Set ws = gSelectedCell.Worksheet
            ' Determine which tables to work with based on which sheet we're on
            If ws.Name = "ShipmentsTally" Then
                Set tbl = ws.ListObjects("ShipmentsTally")
                Set dataTbl = ws.ListObjects("invSysData_Shipping")
            ElseIf ws.Name = "ReceivedTally" Then
                Set tbl = ws.ListObjects("ReceivedTally")
                Set dataTbl = ws.ListObjects("invSysData_Receiving")
            Else
                ' Not on a valid tally sheet
                isRunning = False
                Unload Me
                Exit Sub
            End If
            ' Get UOM for this item
            Dim itemUOM As String
            itemUOM = modGlobals.GetItemUOMByRowNum(chosenRowNum, chosenItemCode, chosenValue)
            ' Get the cell identifier (row number in the tally sheet)
            Dim tallyRowNum As Long
            tallyRowNum = gSelectedCell.row - tbl.HeaderRowRange.row
            ' ***** NEW CODE: Delete any existing data for this cell *****
            DeleteExistingDataForCell dataTbl, tallyRowNum
            ' Add a row to the corresponding data table
            If Not dataTbl Is Nothing Then
                Dim dataRow As ListRow
                Set dataRow = dataTbl.ListRows.Add
                ' Fill the data table row with all the item information
                FillDataTableRow dataRow, itemUOM, chosenVendor, location, chosenItemCode, chosenRowNum
                ' ***** NEW CODE: Add reference to the tally row number *****
                SetTallyRowNumber dataRow, tallyRowNum
            End If
        End If
        On Error GoTo 0
    End If
    isRunning = False
    Unload Me
End Sub
' Helper function to fill a data table row with item information
Private Sub FillDataTableRow(dataRow As ListRow, uom As String, vendor As String, location As String, ItemCode As String, rowNum As String)
    On Error Resume Next
    ' Find the column indexes
    Dim tbl As ListObject
    Dim colFound As Boolean
    Set tbl = dataRow.Parent
    Dim i As Long
    ' Set UOM value
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "UOM" Then
            dataRow.Range(1, i).value = uom
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "UOM column not found in data table"
    ' Set VENDOR value
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "VENDOR" Then
            dataRow.Range(1, i).value = vendor
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "VENDOR column not found in data table"
    ' Set LOCATION value
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "LOCATION" Then
            dataRow.Range(1, i).value = location
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "LOCATION column not found in data table"
    ' Set ITEM_CODE value - FIXED: Using correct parameter
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "ITEM_CODE" Then
            dataRow.Range(1, i).value = ItemCode  ' Using itemCode parameter
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "ITEM_CODE column not found in data table"
    ' Set ROW value - FIXED: Using correct parameter
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "ROW" Then
            dataRow.Range(1, i).value = rowNum  ' Using rowNum parameter
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "ROW column not found in data table"
    ' Set ENTRY_DATE value
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "ENTRY_DATE" Then
            dataRow.Range(1, i).value = Now()
            colFound = True
            Exit For
        End If
    Next i
    If Not colFound Then Debug.Print "ENTRY_DATE column not found in data table"
    On Error GoTo 0
End Sub
' Helper function to get location information
Private Function GetLocationByItem(ItemCode As String, itemName As String) As String
    On Error GoTo ErrorHandler
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim foundRow As Long
    Dim locationCol As Long
    GetLocationByItem = ""  ' Default value
    Set ws = ThisWorkbook.Sheets("INVENTORY MANAGEMENT")
    Set tbl = ws.ListObjects("invSys")
    ' Get the location column index
    On Error Resume Next
    locationCol = tbl.ListColumns("LOCATION").Index
    On Error GoTo ErrorHandler
    If locationCol = 0 Then Exit Function
    ' Try to find the item by code first
    If ItemCode <> "" Then
        foundRow = FindRowByValue(tbl, "ITEM_CODE", ItemCode)
    End If
    ' If not found by code, try by name
    If foundRow = 0 And itemName <> "" Then
        foundRow = FindRowByValue(tbl, "ITEM", itemName)
    End If
    ' If found, return the location
    If foundRow > 0 Then
        GetLocationByItem = tbl.DataBodyRange(foundRow, locationCol).value
    End If
    Exit Function
ErrorHandler:
    Debug.Print "Error in GetLocationByItem: " & Err.Description
    ' Return empty string on error
    GetLocationByItem = ""
End Function
' Delete existing data for this cell *****
Private Sub DeleteExistingDataForCell(dataTbl As ListObject, tallyRowNum As Long)
    On Error Resume Next
    ' Find the column that contains the tally row number
    Dim tallyRowCol As Long
    Dim i As Long
    ' First, try to find a TALLY_ROW column
    For i = 1 To dataTbl.ListColumns.count
        If UCase(dataTbl.ListColumns(i).Name) = "TALLY_ROW" Then
            tallyRowCol = i
            Exit For
        End If
    Next i
    ' If we still haven't found it, add the column
    If tallyRowCol = 0 Then
        dataTbl.ListColumns.Add.Name = "TALLY_ROW"
        tallyRowCol = dataTbl.ListColumns.count
    End If
    ' Find and delete all rows that match this tally row number
    Dim rowsToDelete As Collection
    Set rowsToDelete = New Collection
    ' Gather rows to delete (can't delete while iterating)
    For i = dataTbl.ListRows.count To 1 Step -1
        If dataTbl.DataBodyRange(i, tallyRowCol).value = tallyRowNum Then
            rowsToDelete.Add i
        End If
    Next i
    ' Now delete them (in reverse order to avoid index changes)
    For i = rowsToDelete.count To 1 Step -1
        dataTbl.ListRows(rowsToDelete(i)).Delete
    Next i
    On Error GoTo 0
End Sub
' Set the tally row number in the data table *****
Private Sub SetTallyRowNumber(dataRow As ListRow, tallyRowNum As Long)
    On Error Resume Next
    ' Find the column for storing the tally row number
    Dim tbl As ListObject
    Dim colFound As Boolean
    Set tbl = dataRow.Parent
    Dim i As Long
    ' Look for TALLY_ROW column
    colFound = False
    For i = 1 To tbl.ListColumns.count
        If UCase(tbl.ListColumns(i).Name) = "TALLY_ROW" Then
            dataRow.Range(1, i).value = tallyRowNum
            colFound = True
            Exit For
        End If
    Next i
    ' If we still haven't found it, add the column
    If Not colFound Then
        tbl.ListColumns.Add.Name = "TALLY_ROW"
        dataRow.Range(1, tbl.ListColumns.count).value = tallyRowNum
    End If
    On Error GoTo 0
End Sub
' Populate the list box with items from invSys table - FIXED
Private Sub PopulateListBox(itemArray As Variant)
    ' Debug what we're getting
    Debug.Print "PopulateListBox: Received itemArray with dimensions: " & _
                LBound(itemArray, 1) & " to " & UBound(itemArray, 1) & ", " & _
                LBound(itemArray, 2) & " to " & UBound(itemArray, 2)
    Dim i As Long
    Dim rowNum As String, ItemCode As String, itemName As String, vendor As String
    Me.lstBox.Clear
    ' Check if itemArray is properly initialized
    If IsEmpty(itemArray) Or Not IsArray(itemArray) Then
        Debug.Print "PopulateListBox: Invalid itemArray received"
        Exit Sub
    End If
    On Error Resume Next
    For i = LBound(itemArray, 1) To UBound(itemArray, 1)
        ' Make sure we have valid data before adding the item
        If IsArray(itemArray) And UBound(itemArray, 2) >= 2 Then
            ' Extract values with appropriate error handling
            rowNum = CStr(itemArray(i, 0))  ' ROW - FIXED: Now correctly using index 0
            ItemCode = CStr(itemArray(i, 1))  ' ITEM_CODE - FIXED: Now correctly using index 1
            ' Get the item name - column index 2 in the array
            If UBound(itemArray, 2) >= 2 Then
                itemName = CStr(itemArray(i, 2))  ' ITEM name
            Else
                itemName = "Unknown"
            End If
            ' Get vendor data from the invSys table
            vendor = GetVendorByItem(ItemCode, itemName)
            ' Add the item to the list box - FIXED order
            Me.lstBox.AddItem ""
            Me.lstBox.List(Me.lstBox.ListCount - 1, 0) = rowNum      ' ROW
            Me.lstBox.List(Me.lstBox.ListCount - 1, 1) = ItemCode    ' ITEM_CODE
            Me.lstBox.List(Me.lstBox.ListCount - 1, 2) = vendor      ' VENDOR
            Me.lstBox.List(Me.lstBox.ListCount - 1, 3) = itemName    ' ITEM name
        End If
    Next i
    On Error GoTo 0
End Sub
' Helper function to get vendor information
Private Function GetVendorByItem(ItemCode As String, itemName As String) As String
    On Error GoTo ErrorHandler
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim foundRow As Long
    Dim vendorCol As Long
    GetVendorByItem = ""  ' Default value
    Set ws = ThisWorkbook.Sheets("INVENTORY MANAGEMENT")
    Set tbl = ws.ListObjects("invSys")
    ' Get the vendor column index
    On Error Resume Next
    vendorCol = tbl.ListColumns("VENDOR(s)").Index
    On Error GoTo ErrorHandler
    If vendorCol = 0 Then Exit Function
    ' Try to find the item by code first
    If ItemCode <> "" Then
        foundRow = FindRowByValue(tbl, "ITEM_CODE", ItemCode)
    End If
    ' If not found by code, try by name
    If foundRow = 0 And itemName <> "" Then
        foundRow = FindRowByValue(tbl, "ITEM", itemName)
    End If
    ' If found, return the vendor
    If foundRow > 0 Then
        GetVendorByItem = tbl.DataBodyRange(foundRow, vendorCol).value
    End If
    Exit Function
ErrorHandler:
    Debug.Print "Error in GetVendorByItem: " & Err.Description
    ' Return empty string on error
    GetVendorByItem = ""
End Function
' Helper function to find a row by column value (if not already defined)
Private Function FindRowByValue(tbl As ListObject, colName As String, value As Variant) As Long
    Dim i As Long
    Dim colIndex As Integer
    FindRowByValue = 0 ' Default return value if not found
    On Error Resume Next
    colIndex = tbl.ListColumns(colName).Index
    On Error GoTo 0
    If colIndex = 0 Then Exit Function
    For i = 1 To tbl.ListRows.count
        ' Convert both values to strings for more reliable comparison
        If CStr(tbl.DataBodyRange(i, colIndex).value) = CStr(value) Then
            FindRowByValue = i
            Exit Function
        End If
    Next i
End Function
' Helper function to update the description in txtBox2
Private Sub UpdateDescription()
    ' Clear existing description
    Me.txtBox2.text = ""  ' Changed from .text to .Text
    ' If an item is selected in the main listbox
    If Me.lstBox.ListIndex <> -1 Then
        ' Get the selected index
        Dim selectedIndex As Integer
        selectedIndex = Me.lstBox.ListIndex
        ' Get the description for this item from the FullItemList
        ' Add 1 because ListBox is 0-based but array is 1-based
        If selectedIndex + 1 <= UBound(FullItemList, 1) Then
            ' Set the description text
            Me.txtBox2.text = FullItemList(selectedIndex + 1, 4)  ' Changed from .text to .Text
        End If
    End If
End Sub
' Handle Tab key in the form
Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    ' If Tab is pressed, we want to handle it specially
    If KeyCode = vbKeyTab Then
        ' If user has made a selection or has text in the box, commit it
        If Me.lstBox.ListIndex <> -1 Or Trim(Me.txtBox.text) <> "" Then
            CommitSelectionAndClose
        Else
            ' Otherwise just close the form without changes
            Unload Me
        End If
        KeyCode = 0 ' Prevent default tab handling
    End If
End Sub




''''''''''''''''''''''''''''''''''''
' UserForm: frmLogin
''''''''''''''''''''''''''''''''''''
Private Sub btnLogin_Click()
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim foundUser As Range
    Dim username As String
    Dim pin As String
    Dim lastLoginCell As Range
    Dim usernameCol As Integer, pinCol As Integer, lastLoginCol As Integer
    ' Set reference to UserCredentials worksheet and table
    Set ws = ThisWorkbook.Sheets("UserCredentials")
    Set tbl = ws.ListObjects("UserCredentials") ' Ensure correct table name
    ' Get user input
    username = Me.txtUsername.value
    pin = Me.txtPIN.value
    ' Validate inputs
    If username = "" Or pin = "" Then
        Me.lblMessage.Caption = "Please enter both Username and PIN."
        Exit Sub
    End If
    ' Get column indexes dynamically
    usernameCol = tbl.ListColumns("USERNAME").Index
    pinCol = tbl.ListColumns("PIN").Index
    lastLoginCol = tbl.ListColumns("LAST LOGIN").Index
    ' Find user in UserCredentials table
    Set foundUser = tbl.ListColumns("USERNAME").DataBodyRange.Find(What:=username, LookAt:=xlWhole)
    If Not foundUser Is Nothing Then
        ' Check PIN
        If foundUser.offset(0, pinCol - usernameCol).value = pin Then
            ' Update last login time
            foundUser.offset(0, lastLoginCol - usernameCol).value = Now
            ' Update message label instead of showing a popup
            Me.lblMessage.Caption = "Login successful"
            ' Close login form
            Application.OnTime Now + TimeValue("00:00:02"), "modUserAuth.HideLoginForm"
        Else
            Me.lblMessage.Caption = "Incorrect PIN. Try again."
        End If
    Else
        Me.lblMessage.Caption = "User not found."
    End If
End Sub
Private Sub btnResetPIN_Click()
    frmAdminEmail.Show
End Sub
Private Sub btnCloseWorkbook_Click()
    ' Ensure the workbook closes properly
    ThisWorkbook.Close SaveChanges:=True
End Sub
Private Sub UserForm_Initialize()
    ' Mask PIN input with asterisks
    Me.txtPIN.PasswordChar = "*"
End Sub
Private Sub UserForm_Activate()
    ' Apply password masking in case the form reloads
    Me.txtPIN.PasswordChar = "*"
End Sub



''''''''''''''''''''''''''''''''''''
' UserForm: frmReceivedTally
''''''''''''''''''''''''''''''''''''
' Handle btnSend click event
Private Sub btnSend_Click()
    On Error GoTo ErrorHandler
    ' Process the data first
    SendOrderData
    ' Then unload the form
    Unload Me
    Exit Sub
ErrorHandler:
    Debug.Print "Error in btnSend_Click: " & Err.Description
    MsgBox "Error: " & Err.Description, vbCritical
End Sub
Private Sub UserForm_Initialize()
   ' The lstBox should already be populated by TallyOrders()
   ' Center the form on screen
   Me.StartUpPosition = 0 'Manual
   Me.Left = Application.Left + (Application.Width - Me.Width) / 2
   Me.Top = Application.Top + (Application.Height - Me.Height) / 2
End Sub
Sub SendOrderData()
    On Error GoTo ErrorHandler
    Dim i As Long
    Dim receivedSummary As Object
    Set receivedSummary = CreateObject("Scripting.Dictionary")
    ' Create unique reference number for this batch
    Dim batchRefNumber As String
    batchRefNumber = modTS_Log.GenerateOrderNumber()
    ' Skip header row (row 0)
    For i = 1 To Me.lstBox.ListCount - 1
        Dim item As String, quantity As Double, uom As String
        Dim ItemCode As String, rowNum As String
        item = Me.lstBox.List(i, 0)             ' Item name
        quantity = CDbl(Me.lstBox.List(i, 1))   ' Quantity
        uom = Me.lstBox.List(i, 2)              ' UOM
        ItemCode = Me.lstBox.List(i, 3)         ' ItemCode (hidden column)
        rowNum = Me.lstBox.List(i, 4)           ' ROW (hidden column)
        ' Create a unique key with ROW or ITEM_CODE
        Dim uniqueKey As String
        If rowNum <> "" Then
            uniqueKey = "ROW_" & rowNum
        ElseIf ItemCode <> "" Then
            uniqueKey = "CODE_" & ItemCode
        Else
            uniqueKey = "NAME_" & item & "|" & uom
        End If
        ' Get additional data from invSysData_Receiving
        Dim price As Double, vendor As String, location As String
        GetItemDetailsFromDataTable item, ItemCode, rowNum, price, vendor, location
        ' Store complete information in dictionary
        receivedSummary(uniqueKey) = Array(batchRefNumber, item, quantity, price, uom, vendor, location, ItemCode, rowNum, Now())
    Next i
    ' Log the received items to ReceivedLog
    modTS_Log.LogReceivedDetailed receivedSummary
    ' Update quantities in inventory system
    UpdateInventory receivedSummary, "RECEIVED"
    ' Notify user
    MsgBox "Received items have been logged and inventory updated.", vbInformation
    ' Close form after processing
    Unload Me
    Exit Sub
ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description, vbCritical
End Sub
' New function to get additional details from invSysData_Receiving
Private Sub GetItemDetailsFromDataTable(itemName As String, ItemCode As String, rowNum As String, _
                                      ByRef price As Double, ByRef vendor As String, ByRef location As String)
    On Error Resume Next
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("ReceivedTally")
    Dim dataTbl As ListObject
    Set dataTbl = ws.ListObjects("invSysData_Receiving")
    If dataTbl Is Nothing Then
        Debug.Print "Data table invSysData_Receiving not found"
        Exit Sub
    End If
    ' Find matching rows in data table
    Dim i As Long, matchFound As Boolean
    matchFound = False
    ' Check columns exist
    Dim hasPrice As Boolean, hasVendor As Boolean, hasLocation As Boolean
    Dim priceCol As Long, vendorCol As Long, locationCol As Long
    Dim rowCol As Long, itemCodeCol As Long, itemNameCol As Long
    ' Find column indexes
    For i = 1 To dataTbl.ListColumns.count
        Select Case UCase(dataTbl.ListColumns(i).Name)
            Case "PRICE"
                hasPrice = True
                priceCol = i
            Case "VENDOR"
                hasVendor = True
                vendorCol = i
            Case "LOCATION"
                hasLocation = True
                locationCol = i
            Case "ROW"
                rowCol = i
            Case "ITEM_CODE"
                itemCodeCol = i
            Case "ITEMS"
                itemNameCol = i
        End Select
    Next i
    ' Initialize default values
    price = 0
    vendor = ""
    location = ""
    ' Look for matching rows in data table
    For i = 1 To dataTbl.ListRows.count
        Dim rowMatch As Boolean
        rowMatch = False
        ' Match by ROW first (most precise)
        If rowNum <> "" And rowCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, rowCol).value) = rowNum Then
                rowMatch = True
            End If
        ' Then by ITEM_CODE
        ElseIf ItemCode <> "" And itemCodeCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, itemCodeCol).value) = ItemCode Then
                rowMatch = True
            End If
        ' Finally by item name
        ElseIf itemNameCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, itemNameCol).value) = itemName Then
                rowMatch = True
            End If
        End If
        ' If we found a match, get the details
        If rowMatch Then
            matchFound = True
            ' Get PRICE
            If hasPrice Then
                On Error Resume Next
                price = price + CDbl(dataTbl.DataBodyRange(i, priceCol).value)
                On Error GoTo 0
            End If
            ' Get VENDOR (use first one found)
            If hasVendor And vendor = "" Then
                vendor = CStr(dataTbl.DataBodyRange(i, vendorCol).value)
            End If
            ' Get LOCATION (use first one found)
            If hasLocation And location = "" Then
                location = CStr(dataTbl.DataBodyRange(i, locationCol).value)
            End If
        End If
    Next i
    If Not matchFound Then
        Debug.Print "No matching rows found in data table for " & itemName
    End If
End Sub
' Function to update inventory based on ROW or ITEM_CODE
Private Sub UpdateInventory(itemsDict As Object, ColumnName As String)
    On Error GoTo ErrorHandler
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim key As Variant
    Dim foundRow As Long
    Dim currentQty As Double, newQty As Double
    Set ws = ThisWorkbook.Sheets("INVENTORY MANAGEMENT")
    Set tbl = ws.ListObjects("invSys")
    ' Get column index for the target column (e.g., "RECEIVED", "SHIPMENTS")
    Dim targetColIndex As Integer
    targetColIndex = tbl.ListColumns(ColumnName).Index
    ws.Unprotect
    Application.EnableEvents = False
    For Each key In itemsDict.Keys
        Dim itemData As Variant
        itemData = itemsDict(key)
        ' Extract info from the array
        Dim item As String, quantity As Double
        Dim ItemCode As String, rowNum As String
        item = itemData(0)
        quantity = itemData(1)
        ItemCode = itemData(3) ' itemCode at index 3
        rowNum = itemData(4)   ' rowNum at index 4
        foundRow = 0
        ' Try to find by ROW number first (most specific)
        If rowNum <> "" Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ROW", rowNum)
            On Error GoTo ErrorHandler
        End If
        ' If ROW didn't work, try ITEM_CODE
        If foundRow = 0 And ItemCode <> "" Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ITEM_CODE", ItemCode)
            On Error GoTo ErrorHandler
        End If
        ' As last resort, try finding by item name
        If foundRow = 0 Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ITEM", item)
            On Error GoTo ErrorHandler
        End If
        ' If we found the row, update it
        If foundRow > 0 Then
            ' Get current quantity
            currentQty = 0
            On Error Resume Next
            currentQty = tbl.DataBodyRange(foundRow, targetColIndex).value
            If IsEmpty(currentQty) Then currentQty = 0
            On Error GoTo ErrorHandler
            ' Update with new quantity
            newQty = currentQty + quantity
            tbl.DataBodyRange(foundRow, targetColIndex).value = newQty
            ' Log this change
            LogInventoryChange "UPDATE", ItemCode, item, quantity, newQty
        Else
            ' Log that we couldn't find the item
            LogInventoryChange "ERROR", ItemCode, item, quantity, 0
        End If
    Next key
    Application.EnableEvents = True
    ws.Protect
    Exit Sub
ErrorHandler:
    Application.EnableEvents = True
    ws.Protect
    MsgBox "Error updating inventory: " & Err.Description, vbCritical
End Sub
' Helper function to find a row by column value
Private Function FindRowByValue(tbl As ListObject, colName As String, value As Variant) As Long
    Dim i As Long
    Dim colIndex As Integer
    FindRowByValue = 0 ' Default return value if not found
    On Error Resume Next
    colIndex = tbl.ListColumns(colName).Index
    On Error GoTo 0
    If colIndex = 0 Then Exit Function
    For i = 1 To tbl.ListRows.count
        If tbl.DataBodyRange(i, colIndex).value = value Then
            FindRowByValue = i
            Exit Function
        End If
    Next i
End Function
' Helper function to log inventory changes
Private Sub LogInventoryChange(Action As String, ItemCode As String, itemName As String, qtyChange As Double, newQty As Double)
    ' This would call your inventory logging system
    On Error Resume Next
    ' You might want to use the modTS_Log module for this
End Sub
' Add this function to frmReceivedTally.frm:
Private Function GetUOMFromDataTable(item As String, ItemCode As String, rowNum As String) As String
    On Error Resume Next
    Dim ws As Worksheet, dataTbl As ListObject
    Set ws = ThisWorkbook.Sheets("ReceivedTally")
    Set dataTbl = ws.ListObjects("invSysData_Receiving")
    Dim uom As String
    uom = "each" ' Default
    ' Find UOM column
    Dim uomCol As Long, itemCol As Long, codeCol As Long, rowCol As Long
    For i = 1 To dataTbl.ListColumns.count
        Select Case UCase(dataTbl.ListColumns(i).Name)
            Case "UOM": uomCol = i
            Case "ITEMS": itemCol = i
            Case "ITEM_CODE": codeCol = i
            Case "ROW": rowCol = i
        End Select
    Next i
    ' Search for match
    For i = 1 To dataTbl.ListRows.count
        Dim found As Boolean
        found = False
        If rowNum <> "" And rowCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, rowCol).value) = rowNum Then found = True
        ElseIf ItemCode <> "" And codeCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, codeCol).value) = ItemCode Then found = True
        ElseIf item <> "" And itemCol > 0 Then
            If CStr(dataTbl.DataBodyRange(i, itemCol).value) = item Then found = True
        End If
        If found And uomCol > 0 Then
            uom = CStr(dataTbl.DataBodyRange(i, uomCol).value)
            Exit For
        End If
    Next i
    GetUOMFromDataTable = uom
End Function




''''''''''''''''''''''''''''''''''''
' UserForm: frmShipmentsTally
''''''''''''''''''''''''''''''''''''
' Handle btnSend click event
Private Sub btnSend_Click()
    SendOrderData
    Unload Me
End Sub
Private Sub UserForm_Initialize()
    ' Center the form on screen
    Me.StartUpPosition = 0 'Manual
    Me.Left = Application.Left + (Application.Width - Me.Width) / 2
    Me.Top = Application.Top + (Application.Height - Me.Height) / 2
End Sub
Sub SendOrderData()
    On Error GoTo ErrorHandler
    Dim i As Long, shipmentsSummary As Object
    Set shipmentsSummary = CreateObject("Scripting.Dictionary")
    ' Skip header row (row 0)
    For i = 1 To Me.lstBox.ListCount - 1
        Dim item As String, quantity As Double, uom As String
        Dim ItemCode As String, rowNum As String
        item = Me.lstBox.List(i, 0)
        quantity = CDbl(Me.lstBox.List(i, 1))
        uom = Me.lstBox.List(i, 2)
        ' Get the hidden columns with ITEM_CODE and ROW
        ItemCode = Me.lstBox.List(i, 3)
        rowNum = Me.lstBox.List(i, 4)
        ' Create a unique key with ROW or ITEM_CODE
        Dim uniqueKey As String
        If rowNum <> "" Then
            uniqueKey = "ROW_" & rowNum
        ElseIf ItemCode <> "" Then
            uniqueKey = "CODE_" & ItemCode
        Else
            uniqueKey = "NAME_" & item & "|" & uom
        End If
        ' Store in dictionary with all needed information
        shipmentsSummary(uniqueKey) = Array(item, quantity, uom, ItemCode, rowNum)
    Next i
    ' Log the shipment in the ShipmentsLog
    modTS_Log.LogShipments shipmentsSummary
    ' Update quantities in inventory system
    UpdateInventory shipmentsSummary, "SHIPMENTS"
    ' Close form after processing
    Unload Me
    Exit Sub
ErrorHandler:
   MsgBox "Error " & Err.Number & ": " & Err.Description, vbCritical
End Sub
' Function to update inventory based on ROW or ITEM_CODE
Private Sub UpdateInventory(itemsDict As Object, ColumnName As String)
    On Error GoTo ErrorHandler
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim key As Variant
    Dim foundRow As Long
    Dim currentQty As Double, newQty As Double
    Set ws = ThisWorkbook.Sheets("INVENTORY MANAGEMENT")
    Set tbl = ws.ListObjects("invSys")
    ' Get column index for the target column (e.g., "RECEIVED", "SHIPMENTS")
    Dim targetColIndex As Integer
    targetColIndex = tbl.ListColumns(ColumnName).Index
    ws.Unprotect
    Application.EnableEvents = False
    For Each key In itemsDict.Keys
        Dim itemData As Variant
        itemData = itemsDict(key)
        ' Extract info from the array
        Dim item As String, quantity As Double
        Dim ItemCode As String, rowNum As String
        item = itemData(0)
        quantity = itemData(1)
        ItemCode = itemData(3) ' itemCode at index 3
        rowNum = itemData(4)   ' rowNum at index 4
        foundRow = 0
        ' Try to find by ROW number first (most specific)
        If rowNum <> "" Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ROW", rowNum)
            On Error GoTo ErrorHandler
        End If
        ' If ROW didn't work, try ITEM_CODE
        If foundRow = 0 And ItemCode <> "" Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ITEM_CODE", ItemCode)
            On Error GoTo ErrorHandler
        End If
        ' As last resort, try finding by item name
        If foundRow = 0 Then
            On Error Resume Next
            foundRow = FindRowByValue(tbl, "ITEM", item)
            On Error GoTo ErrorHandler
        End If
        ' If we found the row, update it
        If foundRow > 0 Then
            ' Get current quantity
            currentQty = 0
            On Error Resume Next
            currentQty = tbl.DataBodyRange(foundRow, targetColIndex).value
            If IsEmpty(currentQty) Then currentQty = 0
            On Error GoTo ErrorHandler
            ' Update with new quantity
            newQty = currentQty + quantity
            tbl.DataBodyRange(foundRow, targetColIndex).value = newQty
            ' Log this change
            LogInventoryChange "UPDATE", ItemCode, item, quantity, newQty
        Else
            ' Log that we couldn't find the item
            LogInventoryChange "ERROR", ItemCode, item, quantity, 0
        End If
    Next key
    Application.EnableEvents = True
    ws.Protect
    Exit Sub
ErrorHandler:
    Application.EnableEvents = True
    ws.Protect
    MsgBox "Error updating inventory: " & Err.Description, vbCritical
End Sub
Private Function FindRowByValue(tbl As ListObject, colName As String, value As Variant) As Long
    Dim i As Long
    Dim colIndex As Integer
    FindRowByValue = 0 ' Default return value if not found
    On Error Resume Next
    colIndex = tbl.ListColumns(colName).Index
    On Error GoTo 0
    If colIndex = 0 Then Exit Function
    For i = 1 To tbl.ListRows.count
        If tbl.DataBodyRange(i, colIndex).value = value Then
            FindRowByValue = i
            Exit Function
        End If
    Next i
End Function
' Helper function to log inventory changes
Private Sub LogInventoryChange(Action As String, ItemCode As String, itemName As String, qtyChange As Double, newQty As Double)
    ' This would call your inventory logging system
    On Error Resume Next
    ' You might want to use the modTS_Log module for this
End Sub



''''''''''''''''''''''''''''''''''''
' UserForm: frmReceivingSavedList
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmShippingSavedList
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmProduction
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmCreateRecipeTable
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmShippingCreateList
''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''
' UserForm: frmSubstitution
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmIngredientPalette
''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''
' UserForm: frmCreateSubstitutionList
''''''''''''''''''''''''''''''''''''



